// The Inverse Protocol - Prototype

//// CONSTANTS
var time = Math.floor(Date.now());
var nodes = {};
var pings = [];
var network_size = 0;
var current_block = 0;

//// MUTATORS
var min = 0; 
var max = 100; // range for RNG
var start = 10; // number of nodes to start with
var reality = 2; // sometimes you gotta half things
var things = ['happy', 'sad', 'big', 'little'];

//// GENERATORS
generatePings = function () {
    // Loop n times where n is the network size
    for ( var n = 0; n < network_size; n++ ) {
        // generate a ping from each node to every other node
    for ( var i = 0; i < network_size; i++ ) {
        // don't let a node ping itself
        if (n != i) {
            // the pings are generated by the distance between nodes 
            a = nodes[n].y - nodes[i].y
            b = nodes[n].x - nodes[i].x
            // build the ping data
        var ping = {
            from: n,
            to: i,
            time: Math.sqrt( a*a + b*b ) / reality //good ol Pythagorean divided by realism
        }
        pings.push(ping);
        }
    }
    }
console.log('Pings: ')
console.log(pings)

return pings;
}

generateNodes = function (amount) {
    // generate the amount of nodes specified
    for ( var i = 0; i < amount; i++ ) {
        id = network_size + i;
    // node data
    nodes[id] = {
        name: things[Math.floor(Math.random()*things.length)] + "Node",
        x: Math.random() * (max - min) + min,
        y: Math.random() * (max - min) + min,
        power: 0
    };  
}
// update network size
network_size = Object.keys(nodes).length;

// test
console.log ('Network Size: ' + network_size)
console.log ('Nodes: ')
console.log (nodes)

return nodes;
}
// generate nodes
generateNodes (start);

// generate pings between the nodes
generatePings (min,max);

//// PROTOCOLS
powerLevel = function (node) {
    // power level is the number of computations allowed to enter the network by a node at any given time
    // network location and power level is directly proportional
    // closer to other nodes = less power
    // farther from other nodes = more power
    
    // we determine the location by the total ping time
    network_location = 0;
    total_pings = [];

    // get pings from the pings array
    get_pings = pings.filter(function (ping) {

        if (ping.from == node) { 
            console.log('to:' + ping.to + ' time:' + ping.time)
            // total the pings
            total_pings.push(ping.time)
        }
    }) 
    
    console.log(total_pings)
    
    // add up the pings to get the network location
    for(var i=0; i < total_pings.length; i++) {
        network_location += total_pings[i];
    }

    console.log('Network Location:' + network_location)
    // power level = average ping
    power_level = network_location / network_size;

    console.log ('Power Level:' + power_level)
    
    return power_level;
}
// find the power level for a node
node = 0
powerLevel(node)